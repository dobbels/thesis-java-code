Berekentijden op server (ms):
2
1
1
1
0
1
1
1
2
0

Roundtrip times (ms):
274
231
296
246
239
248
262
244
238
248

-> louche eigenlijk dat dat meer tijd neemt dan heel het hidra protocol bij uriarte. Hoe zou dat komen? + als mijn transmissietijden altijd trager zijn, betekent dat dat mijn algemene protocol eigenlijk abnormaal zou zijn in zijn setup? Of gewoon perfect hetzelfde, kan ook

Berekentijden op de sensornode: => wat is de rountrip time? Daar wil je wel al een tijdje een indicatie van. 
1878
1879
1879
1877
1877
1879
1878
1877
1879
1879



"De meting geldt voor de intrekking van een toegansrecht"
"De gemiddelde reactietijd tussen de beslissing om het beleid te updaten en de ontvangst van een ACK is X. Dit betekent dat de delay tussen die beslissing en het effectief doorvoeren van dit beleid, dus zonder de transmissie tijd van de ACK, lager ligt."
"waarvan gemiddeld X milliseconden aan berekening op server en X op sensor node"


---------------------------
Voor demo policy

Berekentijden op server (ms):
1
1
2
1
1
1
0
0
2
1

Roundtrip times (ms):
245
266
255
251
254
348
176
280
250
283


Berekentijden op de sensornode: 
1881
1881
1879
1879
1879
1880
1879
1880
1879
1880

---------------------------
Policy van 21 bytes, aangezien dat tussenin blacklist en 40 bytes ligt. Demo policy is minder relevant?

Berekentijden op server (ms):


Roundtrip times (ms):



Berekentijden op de sensornode: 

---------------------------
Voor het grootste beleid ook ff roundtrip time + berekentijden op sensornode. Kijk gewoon eens wat het resultaat is. 
-> pas op: niet zo veel plaats meer over voor dat beleid! Max 60 bytes zijn, zie lengte van huidige bericht (Ps + Kir + Mac = (24 + Beleid) <= 84 ?) 
TODO Implementeer mss nog eens BiggestTestPolicyUpdateMessage() DemoPolicyUpdateMessage() + WhiteListMessage(), daarmee kan je nog wat extra flexibiliteit/interactiviteit inbouwen in je verdediging. 
TODO maak demootje met wat meer flexibiliteit/interactiviteit door 2 user inputs te vragen en while loop te schrijven
TODO pas in klasse diagram aan, ook naam HidraBlacklist -> Blacklist

Berekentijden op server (ms):
0
1
1
1
3
2
3
2
2
2

Roundtrip times (ms):
163
591
375
280
393
518
250
286
250
161

-> variantie is een stuk groter bij zo'n groot bericht
-> als je dit opmerkt, geef dan totale grootte van dat bericht, niet gewoon die van de policy
-> het gaat hier dus om een beleid van 40 bytes
-> Als je alleen de blacklist resultaten geeft, noem de sectie dan ook zo. 

Berekentijden op de sensornode: 
2317
2316
2317
2317
2317
2317
2318
2317
2317
2317





---------------------------
Energiegebruik op sensornode, steeds van ontvangst tot ontvangst (dus je kan het vanaf de tweede berekenen en dan is er overlap tussen):
(-> data rond energieverbruik op sensor door protocol is niet juist. Eerste ontvangst wordt niet meegerekend hierin + laatste verzending ook niet)

Stom dat die send_ack ook in de energieberekening komt. Doe nog 1 test zonder die ack en met 60 ms tussen de updates, we zullen zien wat dat geeft



--------------------------
Energie bij grotere policy



TODO nog tijd en energie voor demopolicy. Wie weet gebruik je dat nog, want dan heb je 3 meetpunten deny - demo - superset1


(Vraag na de deadline nog eens na: Gewoon voor de zekerheid: ik neem nu aan dat mijn demo + presentatie in het Engels zal zijn. Klopt dit?)

